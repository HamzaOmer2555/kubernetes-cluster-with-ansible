Update Document;

## Remove/Clear the existing cluster

sudo kubeadm reset

sudo rm -rf /etc/kubernetes
sudo rm -rf /var/lib/etcd
sudo rm -rf /var/lib/kubelet
sudo rm -rf /var/lib/dockershim
sudo rm -rf /var/run/kubernetes

sudo ip link delete cni0
sudo ip link delete flannel.1
sudo ip link delete docker0

sudo systemctl restart systemd-resolved

sudo apt purge -y kubeadm kubelet kubectl --allow-change-held-packages

sudo apt autoremove -y
sudo rm -rf /etc/apt/sources.list.d/kubernetes.list
sudo rm -f /usr/share/keyrings/kubernetes-archive-keyring.gpg

sudo rm -rf /var/log/pods
sudo rm -rf /var/log/containers
sudo rm -rf /var/log/kube*

sudo systemctl stop docker
sudo rm -rf /var/lib/docker


sudo systemctl stop containerd
sudo apt purge -y containerd
sudo rm -rf /var/lib/containerd


## Start Cluster Configuration

sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab
sudo modprobe overlay
sudo modprobe br_netfilter

sudo vi /etc/modules-load.d/k8s.conf
overlay
br_netfilter

sudo vi /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1

sudo sysctl --system
sudo apt install -y containerd
sudo mkdir -p /etc/containerd

sudo containerd config default | sudo tee /etc/containerd/config.toml

sudo vi /etc/containerd/config.toml
[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
  SystemdCgroup = true

sudo systemctl daemon-reload
sudo systemctl restart containerd
sudo systemctl enable containerd


sudo apt install -y apt-transport-https ca-certificates curl
sudo echo deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ / | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

sudo apt-get update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

kubeadm version
kubectl version --client
kubelet --version

## Configure HAPROXY on haproxy node
--Server configuration
--Hardware - 2vCPU, 2GB RAM, 50 GB disk
--OS - Debian 12.8

sudo apt install -y haproxy
sudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.orig
sudo vi /etc/haproxy/haproxy.cfg

remove everything and add the following
//////////
frontend kubernetes-frontend
    bind *:6443
    option tcplog
    mode tcp
    default_backend kubernetes-backend

backend kubernetes-backend
    mode tcp
    balance roundrobin
    option tcp-check
    server <control-plane-01> <control-plane-01-ip>:6443 check
    server <control-plane-02> <control-plane-02-ip>:6443 check
    server <control-plane-03> <control-plane-03-ip>:6443 check
///////////

sudo systemctl enable haproxy --now

## Update hostname and ip on all nodes to include haproxy hostname and ip

sudo vi /etc/hosts


## On control-plane-01 Initialize the cluster
sudo kubeadm init --control-plane-endpoint "<haproxy-host>:6443" --pod-network-cidr=10.244.0.0/16 --upload-certs

* Save the output and run the join commands after configuring calico

## configure Calico CNI
sudo kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

## Label the worker nodes
kubectl label node <worker01-node-name> node-role.kubernetes.io/worker=worker
kubectl label node <worker02-node-name> node-role.kubernetes.io/worker=worker
kubectl label node <worker03-node-name> node-role.kubernetes.io/worker=worker

## Configure Helm repo and install it
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm